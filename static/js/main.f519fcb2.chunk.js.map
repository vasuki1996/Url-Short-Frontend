{"version":3,"sources":["logo.svg","components/header.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Navbar","bg","variant","Brand","href","alt","src","width","height","className","MainArea","props","state","short_url","_buildUrl","handleSubmit","bind","handleChange","event","console","log","target","value","this","setState","preventDefault","fetch","method","body","JSON","stringify","url","trim","then","res","json","data","window","location","origin","hash","document","getElementById","innerHTML","class","id","role","onSubmit","onChange","type","placeholder","React","Component","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,kICoB5BC,EAjBA,WACX,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QAC9B,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SACjB,yBACEC,IAAI,GACJC,IAAI,YACJC,MAAM,KACNC,OAAO,KACPC,UAAU,6BACT,IAPL,kB,+CCgDWC,E,YAnDX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAAEC,UAAW,qBAAsBC,UAAW,MAC3D,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJL,E,0EAONE,GACTC,QAAQC,IAAIF,EAAMG,OAAOC,OACzBC,KAAKC,SAAS,CAAEX,UAAWK,EAAMG,OAAOC,U,mCAG/BJ,GAAQ,IAAD,OAEhBA,EAAMO,iBACNC,MAAM,oDAAqD,CACvDC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBC,IAAKR,KAAKX,MAAMC,UAAUmB,WAE/BC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACdF,MAAK,SAAAG,GACFjB,QAAQC,IAAIgB,GACZ,IAAItB,EAAYuB,OAAOC,SAASC,OAAS,IAAMH,EAAKI,KACpD,EAAKhB,SAAS,CAAEV,UAAWA,IAC3B2B,SAASC,eAAe,SAASC,UAAjC,mBAAyD,EAAK/B,MAAME,UAApE,aAAkF,EAAKF,MAAME,UAA7F,QACAK,QAAQC,IAAI,UAAW,EAAKR,Y,+BAKxC,OACI,yBAAKgC,MAAM,kBACP,0BAAMC,GAAG,eAAeC,KAAK,OAAOC,SAAUxB,KAAKR,cAC/C,yBAAK6B,MAAM,eACP,2BAAOtB,MAAOC,KAAKX,MAAMC,UAAWmC,SAAUzB,KAAKN,aAAcgC,KAAK,MAAML,MAAM,wBAAwBM,YAAY,8BACtH,0BAAMN,MAAM,mBACR,4BAAQK,KAAK,SAASL,MAAM,+BAA5B,cAIZ,yBAAKC,GAAG,gBAAR,kBAAsC,0BAAMA,GAAG,QAAQD,MAAM,iBAAiBrB,KAAKX,MAAME,iB,GA1C9EqC,IAAMC,WCcdC,MATf,WACE,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCc6C,QACW,cAA7BjB,OAAOC,SAASiB,UAEe,UAA7BlB,OAAOC,SAASiB,UAEhBlB,OAAOC,SAASiB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASC,eAAe,SD6H3C,kBAAmBiB,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.f519fcb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\nconst Header = () => {\r\n    return(\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n    <Navbar.Brand href=\"#home\">\r\n      <img\r\n        alt=\"\"\r\n        src=\"/logo.svg\"\r\n        width=\"30\"\r\n        height=\"30\"\r\n        className=\"d-inline-block align-top\"\r\n      />{' '}\r\n      URL Shortner\r\n    </Navbar.Brand>\r\n  </Navbar>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass MainArea extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { short_url: \"https://google.com\", _buildUrl: null };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        console.log(event.target.value);\r\n        this.setState({ short_url: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        //alert('A name was submitted: ' + this.state.value);\r\n        event.preventDefault();\r\n        fetch(\"https://radiant-spire-23461.herokuapp.com/shorten\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                url: this.state.short_url.trim()\r\n            })\r\n        }).then(res => res.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                var _buildUrl = window.location.origin + '/' + data.hash;\r\n                this.setState({ _buildUrl: _buildUrl });\r\n                document.getElementById(\"final\").innerHTML = `<a href=\"${this.state._buildUrl}\">${this.state._buildUrl}</a>`;\r\n                console.log(\"States \", this.state);\r\n            })\r\n}\r\n\r\nrender(){\r\n    return (\r\n        <div class=\"container mt-5\">\r\n            <form id=\"form_shorten\" role=\"form\" onSubmit={this.handleSubmit}>\r\n                <div class=\"input-group\">\r\n                    <input value={this.state.short_url} onChange={this.handleChange} type=\"url\" class=\"form-control text-url\" placeholder=\"Enter a URL to shorten...\" />\r\n                    <span class=\"input-group-btn\">\r\n                        <button type=\"submit\" class=\"btn btn-success btn-shorten\">Shorten</button>\r\n                    </span>\r\n                </div>\r\n            </form>\r\n            <div id=\"shorten_area\">Shortened URL: <span id=\"final\" class=\"shortened-url\">{this.state._buildUrl}</span></div>\r\n        </div>);\r\n}\r\n}\r\n\r\n\r\n// const Main = () => {\r\n\r\n// }\r\n\r\nexport default MainArea;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './components/header';\nimport Main from './components/main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}